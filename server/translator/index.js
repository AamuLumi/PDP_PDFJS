let path = Meteor.npmRequire('path');
let Future = Meteor.npmRequire('fibers/future');
let fs = Meteor.npmRequire('fs');


/**
 * Get a temporary file from the folder ../web.browser/app/TempFiles
 *
 * @param {name} The name of the file, without the file extension
 * @return {data} The content of the file
 */
function GetTempFile(name) {

  let future = new Future();

  fs.readFile('../web.browser/app/TempFiles/filestoprocess-' +
    name, 'utf8',
    Meteor.bindEnvironment(function(err, data) {
      if (err) {
        return console.log(err);
      }

      return future.return(data);
    }));

  return future.wait();

}
/**
 * Translate a file to the JSON format, and add it to the database
 *
 * @param {id} The file Id as generated by the Collection
 * @param {filename} The full name of the file, with file extension
 */
Meteor.myFunctions.translate = function(id, filename, msObject) {

  Meteor.myFunctions.messageSender.new({
    templateUpload: true,
    title: 'Template en cours d\'upload ...',
    name: filename,
    percent: 20
  }, msObject);

  let ext = path.extname(filename);
  let nameWext = path.basename(filename, ext);

  let translator = undefined;
  let data = undefined;

  if (ext === '.xml') {
    data = GetTempFile(id + '-' + filename);
    translator = Meteor.myFunctions.translateXML;
  } else if (ext === '.docx') {
    data = '../web.browser/app/TempFiles/filestoprocess-' + id +
      '-' + filename;
    translator = Meteor.myFunctions.translateDOCX;
  }

  if (translator && data) {

    data.filename = filename;
    let result = translator.translate(data, msObject);

    console.log(result);

    Collections.Templates.upsert({
      title: nameWext
    }, {
      content: result.template,
      title: nameWext
    });

    Collections.Fields.upsert({
      title: nameWext
    }, {
      content: result.fields,
      title: nameWext
    });

    Meteor.myFunctions.messageSender.new({
      templateUpload: true,
      title: 'Template uploaded!',
      percent: 100,
      name: filename
    }, msObject);

  }
};
