import path from 'path';
import Future from 'fibers/future';
import fs from 'fs';
import DOCXTranslator from './docx';
import XMLTranslator from './xml';
import MessageSender from '../tools/messageSender';
import {
  Collections
}
from '../../collections.js';


/**
 * @summary Get a temporary file from the folder ../web.browser/app/TempFiles
 * @method GetTempFile
 * @memberOf translate
 * @param {String} name The name of the file, without the file extension
 * @returns {data} The content of the file
 */
function GetTempFile(name) {

  let future = new Future();

 // We read the temporary file corresponding to the template and return
 // the content
  fs.readFile('../web.browser/app/TempFiles/filestoprocess-' +
    name, 'utf8',
    Meteor.bindEnvironment(function(err, data) {
      if (err) {
        return console.log(err);
      }

      return future.return(data);
    }));

  return future.wait();

}
/**
 * @summary Translate a file to the JSON format, and add it to the DB
 * @method translate
 * @param {String} id The file Id as generated by the Collection
 * @param {String} filename The full name of the file, with file extension
 */
export default function translate(id, filename, msObject) {
  MessageSender.new({
    templateUpload: true,
    title: 'Template en cours de téléversement..',
    name: filename,
    percent: 20,
    type: 'info'
  }, msObject);

  let ext = path.extname(filename);
  let nameWext = path.basename(filename, ext);

  let translator = undefined;
  let data = undefined;

  //If the file is a XML file
  if (ext === '.xml') {
    //Get the content of the temp file
    data = GetTempFile(id + '-' + filename);
    //Select the XML Translator
    translator = XMLTranslator;
  //If the file if a DOCX file
  } else if (ext === '.docx') {
    //Get the path of the temp file
    data = '../web.browser/app/TempFiles/filestoprocess-' + id +
      '-' + filename;
    //Select the DOCX Translator
    translator = DOCXTranslator;
  //If the file extension is not
  } else {
    MessageSender.new({
      templateUpload: true,
      title: 'Format non reconnu.',
      errorMessage:
        'Format non reconnu, les formats compatibles sont : XML, DOCX',
      percent: 20,
      type: 'danger'
    }, msObject);
  }

  //If we have a translator and data to translate
  if (translator && data) {

    data.filename = filename;

    //Translate to JSON
    let result = translator.translate(data, msObject);

    //Remove temp file
    Collections.FilesToProcess.remove({
      _id: id
    });

    if (result !== undefined) {

      //Insert or update the JSON template
      Collections.Templates.upsert({
        _id: nameWext,
        title: nameWext
      }, {
        content: result.template,
        _id: nameWext,
        title: nameWext
      });

      //Insert or update the JSON fields
      Collections.Fields.upsert({
        _id: nameWext,
        title: nameWext
      }, {
        content: result.fields,
        _id: nameWext,
        title: nameWext
      });

      MessageSender.new({
        templateUpload: true,
        title: 'Template téléversé !',
        percent: 100,
        name: filename,
        type: 'info'
      }, msObject);
    }
  }
}
